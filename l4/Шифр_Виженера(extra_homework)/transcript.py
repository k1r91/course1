import re
from math import gcd
with open('test.txt', 'r', encoding='utf-8') as f:
    cyphers = []
    for line in f:
        if line[:4] == "Шифр":
            cyphers.append(line[7:])
#cypher = cyphers[0]
cypher1 = '''СРЕПУДПДТЙЧЭИШРСЕКЭБФКОЮФЧХАШЫХЯВЯТБЫВЫАПОНХБКФВЫЙХШЕШФЧХОЮХЪЭАШЙЮРЧФБЭЫЗГОДАЫШУДЬЯБЙВОАТМБЩЛХГБУАМДСУЕЭКЭННТМСЩЯЗСЭБОЫТАУКПЙЪЬОБЖЬГЛБПЮГУШНЬОИРЙЧОАШФПЦИЮБЧУЗЭНУШЛЭНВЫМУМАСКЪППТАВФПОНБМОЬСЬЗЪЗ'''
cypher2 = '''ЮСЫЛИЮЖЭВЛЯХЪЭОШПЭЕТЫОЮЩЧЫГЬУОХУПУСРПЧЯНЧЕЧЩПШЖПЭДРРАХЧЫГЬШИШРГЩПЮЙПРПЫПСЕЫЮССЯЫЕИШШХФСЧЙЕРТПЪСАШБУОЯСУУХЧЙСОИРТСУНССШЦЕТСПЪЛШОЫЫЖЛВФАКРОИЧАФСЬЪСУСЫТХЬМЫЫМСОЧЬОХПЭЬСЪПЧЬОХППШМЭООЮБАИЭЦСЯГФБИФШ'''
cypher3 = "МЭИЁЫРНЁЬЧГДКЧГЕЖЦМБХЩЭЪУЩЖЩЩДГГЧЛПИУНЛТФЮМГЬЮЩБЧЪЙЁОЪЗОПЧМЩПЦПИЭЬЖЮПЩМХНЪЙЁМЪЗЩЩГИЧАЭАЬЭЧЩМЪЛЛЙКЧМЕКБНЁЭЪБЫКДЛЬФШМЫПЭАТЬЪИАЧТЮШЩФАВЩЬЖОШРАЁЧАОЧХРЫЙЩЮРЁЦЭРТФШМГЩПМБВРЙЁМРИШЁЧЛЬТЛИЁШЩЩБЬЖЛЯШЛКЬШФРЁНЪГВКЮГЗУЩЖЕЬЦМЪЩНГГЖШМЮУООЧЯЛЯЬТЯУЁНЪСДУЬЮЩГРБЁЭРНЬЫЗАДЩЭИЩПЪЛЕУОВЬШРПГЮТЖГПЕГЙЩЧЪВЩГРЁЪЬЖЬАЛЙАТУЮЪЫЛЛАБЖБЫПЪЛЩЩЭНАЭЖАЧЦЭЭАЛЖЙЩЪРОЩЁХОЧТНМШДРПЙМРЮЕШЛНЧМЧМЩШЛНЗУНГЙЬЮАЁМЛЙЧПОМЖЩЦЙЁШЪКЁЭЩМИЙЕЖДЬКИГИПЭДЬЛКЁФЩЖЯГРЗАПЬЮЗАФЖЩПРПЧЦЪЛЬШЪЛЬЬШМЙЫКЛЧЗЮМЕУУЦЬПЫМИМЪГДЮЭМЗЭЯНЗУНГЙЬЮААПЫОАМФВЬМЪЦЬОДГЪЩЫЪЬЫЛАГУВГЧШЩЩЖКНЙЁМЩЩАТЪЯЗКУЖГЩЭЪШПЭНЁХЪЗИЭНМАЬЮОЧАЫМЫЩМЛТФЮМДЮЦМЙЩЬЩБМЖОЧСЛГЙЬКНЗУНЖЫПГГЪЩЩЖШЮПЪИЦФЦВЩШМЪЫЪКЕЩОМАШРПЩЩХПЙМРЛЕЩОМДПЭРКАЪРЦОРЗИЭНЖЙПЧЪЕЩЫЪЬЫМЩГШРПВЩЧЪВЩММГЖДГЫЫЯБААШСЮВФЛЩХЪКЕКЮГЕЩИРЁЭЭРЗКБКЁНЪРЕЩЭЖЙЖЭЭЙЩЧЪВЩЦРЁЧЯСДШЪККУНКЬЬЮГЗЩМИЁЧЯЛЧЛЧЬЫКЮГГЖЩМДЮФГИЭРПЙМРЛЕЩШСЩТОЙЦОЯМЙЦФХЧМДГДЮРБЁЩЮАИПБАФЭЪЗЪЩЭРАШЪЗ"
cypher = cypher3
print(len(cypher))
#cypher = "АДЦЕШБЮЩЬПЙДЛЬЕМШФФОУБЫЕЕОУТЕВБСЭЫЕВТМЕТПХУФАНЫВЬОВЖПЬОВОУЧЕУАУФАЛБОШЕЪШЮЧАТФЖЬАНЫЦТЦЙБШПРБАЛЩРЙЯРЪНЖЮЗСЯУШЪПРЭБЪТСБЕЗФАЛГЛЧЬЩШОШРПЧЩМОДБЬПГПЧШЙООЯУХИЧЫЩЧЕСУТКВУГЛСАГШПЭЮЪЫФШТЕШЦШМНЭЧЦОТЭЩМСЛБРФУРБЫШСОБРЦАТЮЩЙБЬЕЩМИЛБНЗТЙИШТКПЦПКНЖВЩЧИНУЦЦНЖЭЛСАМБЬЖВТШООАШЕЩБЕНЧЛХЬЩШЪТСБЕРХЬПЕМЕТБЕРЦООЮЮБШЖЯЩРЕУШЬХИИУАШЧЖЕУЛЫУБЪТСБЕЗЦНЖЭЛСАМБЬЖЧУБЬКМРЫЬКТЖЮЗЛЫУБНТКАХЦЙЕУДКФАУШОШРЙШФЛЫУУЪШДПФШШЙДБЫШДПХЩЦУЖЧУЧСУХРЧНПШВЬОРГУЫУЪШЪТСБЕРХЮСЫЬЭЮЪШЧЭБЬЕИЬООУЦТЧЙШНОУЩШРНООШХШТПГЩУДПЮУЭВЖГРЧНПДЭТЧУБПКНОБРЙВМШШТЕЖДЭЖНБДЛЦОНЧРХЕБАРЬОМПХШЕДБЪТСБЕРХЬТЭЩППСШПЫТБХЦПНЙШИЬОТБПЧОКДЭШРПАЖКСЕГЮНОКВУЫАУШЦЖНЖЧЩХЖЖАМЕТЭЭЛФФПЕЩНРБЗУЩРПДЭШПЖГРЧОТЫЭЖНБФЮЦАДЖЭШЧУБЩЧВЙЧУЬИТЮЖВИУБМЕКОБНПНООЧТГМУТКМЙЫЮВАНЫЬПЙШУЬЭНБДОШСРБПЫТГЖРЬИНШШЧОЮЕЩЩОТЮРОНЖШЦШЖОБРЩРЖЧЬЬАГЮРЧИЖЫЪШТПЯЮЦЫГЦЛСЕУУАМИЕЫЧЧЕГБТЦОЗАЖПДМТВЬЕОЫКШГСБЧЧЫЖЕЩБНЬШЩЬЧЖЕЖЛЕИХЬЙКПЬЪШПЬЕХТСПДЭШРПАЖЫАНБОШАГЕЩЪАНШСОУЖШЮНЛПХЖЦИХУХЬАНЫСТЗОЫЪЪОГШЬЬИТХЩИВПЮГПБОБЬШКСУДКЮЪЖЙОИБЦЩЧАМП"
#print(cypher)

num_of_keys = {}

print(cypher)
def kazicky(cypher):
    '''
    Возвращает возможные длины шифров,
    которые потом проверяются методом индекса совпадений
    :param cypher:
    :return:
    '''
    length_key = []
    for j in range(2, 10):
        for i in range(len(cypher) - j):
            t_slice = cypher[i: i + j]
            concurr = re.findall(t_slice, cypher)
            if len(concurr) > 2:
                # print(concurr)
                list_index = [0]
                for substr in concurr:
                    list_index.append(cypher.find(substr, list_index[-1] + 1))
                list_index = list_index[1:]
                # print(list_index)
                differences = []
                for i in range(len(list_index) - 1):
                    differences.append(list_index[i + 1] - list_index[i])
                # print(differences)
                gcd_item = gcd(differences[0], differences[1])
                for i in range(1, len(differences) - 1):
                    gcd_item = gcd(gcd_item, differences[i])
                if gcd_item not in length_key:
                    length_key.append(gcd_item)
                    num_of_keys[gcd_item] = 1
                else:
                    num_of_keys[gcd_item] += 1
    return length_key

print(kazicky(cypher))

def get_length(cypher):
    '''вычисляем наиболее вероятную длину ключа методом индекса совпадений'''
    concurrences = {}
    for i in range(0, 16):
        concurrences[i + 1] = 0
        temp_str = cypher[i + 1:] + cypher[:i + 1]
        for j in range(len(temp_str)):
            if temp_str[j] ==  cypher[j]:
                concurrences[i + 1] += 1
        concurrences[i + 1] /= len(cypher)
    # возьмем минимальную длину ключа, индекс которой больше 0.05
    for key, value in concurrences.items():
        if value > 0.05:
            return key
    return False


def get_sequences(length):
    alphabet = "АБВГДЕЖЗИКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
    sequence_list = []
    start_index = alphabet.index(cypher[0])
    for i in range(32):
        sequence = ""
        start_index -= i
        for j in range(len(cypher)):
            if j % length == 0:
                sequence += cypher[j]
        sequence_list.append(sequence)
    for i in sequence_list:
        print(i)
get_sequences(get_length(cypher))